@model InvoiceGenerator.Models.PurchaseInvoice
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{
    ViewData["Title"] = "Create Sale";
    var AREA_NAME = Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.GetNormalizedRouteValue(ViewContext, "area");
    var CONTROLLER_NAME = this.ViewContext.RouteData.Values["controller"]?.ToString();
    var ACTION_NAME = this.ViewContext.RouteData.Values["action"]?.ToString();
    var defaultVATPercentage = 15;

}
@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}
@section HEAD{
    <style>
        #itemlisttable th, #itemlisttable td {
            max-width: 130px;
        }

            label, #itemlisttable td, #itemlisttable td input {
                font-size: 14px !important;
                text-align: left;
            }

        #main > card {
            min-height: 800px;
        }

        .autocomplete-suggestions {
            overflow-y: auto;
            min-width: 330px !important;
        }
    </style>
    <style>
        .form-check-input {
            opacity: 0;
        }

        .form-check-label {
            border: none;
            border-bottom: 1px solid;
            border-color: #5068B8;
            color: #808080;
            border-radius: 0px;
            background: #f7f6f6;
            margin: 0px 2px;
        }


        .table {
            border-collapse: collapse;
            border-spacing: 0;
            width: 100%;
            border: 1px solid #ddd;
        }

        th, td {
            text-align: left;
            padding: 8px;
        }

        .btn-outline-primary:not(:disabled):not(.disabled).active,
        .btn-outline-primary:not(:disabled):not(.disabled):focus,
        .btn-outline-primary:not(:disabled):not(.disabled).show {
            background-color: #5068B8;
            border-color: #5068B8;
            color: white;
            box-shadow: none;
            border-radius: 0px;
        }

        .form-check-label:hover {
            background-color: #5068B8;
            border-color: #5068B8;
            color: white;
        }

        .expandable {
            background: #fff;
            overflow: hidden;
            transition: all .5s ease-in-out;
            line-height: 0;
            padding: 0 1em;
            color: transparent;
        }

            .expandable:target {
                line-height: 1.5;
                padding-top: 1em;
                padding-bottom: 1em;
                color: black;
            }
    </style>
}
<div id="main" class="pb-5">

    <nav aria-label="breadcrumb">
        <ol class="breadcrumb rounded-0 bg-transparent">
            <li class="breadcrumb-item active" aria-current="page">@Localizer["Create Purchase Invoice"]</li>
        </ol>
    </nav>

    <div id="invoice-app" class="card content-box" style="min-height:800px;">
        <div class="card-header bg-white p-0 ">
            <h3>@Localizer["Purchase Invoice"]</h3>
        </div>
        <!-- customer and items detail section start -->
        <form asp-action="Create" method="post">
            <div class="card-body">
                <div asp-validation-summary="All"></div>

                <div class="col"></div>
                <div class="row">
                    <div class="col-12 col-md-8">
                        <div class="row">
                            <div class="col-12 col-sm-5">
                                <div class="form-group">
                                    <div class="d-flex">
                                        <label asp-for="SupplierName"></label>
                                        <span class="text-danger">*</span>
                                    </div>
                                    <input v-model="supplierName" class="form-control" ref="customerName" />
                                    <span asp-validation-for="SupplierName" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    <div class="d-flex">
                                        <label asp-for="SupplierAddress"></label>
                                        <span class="text-danger"></span>
                                    </div>
                                    <input v-model="supplierAddress" class="form-control" />
                                    <span asp-validation-for="SupplierAddress" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col"></div>
                            <div class="col-12">
                                <div class="form-group">
                                    <div class="d-flex">
                                        <label>@Localizer["Items"]</label>
                                        <span class="text-danger">*</span>
                                    </div>
                                    <input style="max-width:438px" type="text" id="items" class="form-control search-bar-ltr" placeholder="@Localizer["Search"]" />
                                    <span class="text-danger" id="itemsError"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-md-4">
                        <div class="d-flex justify-content-between">
                            <div class="amount mr-1 d-flex flex-column align-items-center justify-content-center">
                                <h5 class="text-main">@Localizer["SAR"] <span id="totalTop" class="font-5">{{subTotal.toFixed(2)}}</span></h5>
                                <p class="d-block font-2">@Localizer["Total"]</p>
                            </div>
                            <div class="flex-column align-items-end d-flex">

                                @*<img src="~/icons/cart.svg" alt="" class="float-right ml-4 mr-5" width="70">*@
                                <svg xmlns="http://www.w3.org/2000/svg" style="margin-right:10px" class="float-right ml-4 mr-5 invoice-svg" width="70" viewBox="0 0 18.205 16"><path d="M12.871,14.4a1.6,1.6,0,1,1,1.6,1.6A1.6,1.6,0,0,1,12.871,14.4Zm1.067,0a.533.533,0,1,0,.533-.533A.534.534,0,0,0,13.938,14.4Zm-8.6,0a1.6,1.6,0,1,1,1.6,1.6A1.6,1.6,0,0,1,5.333,14.4Zm1.067,0a.533.533,0,1,0,.533-.533A.534.534,0,0,0,6.4,14.4Zm-.533-1.6a1.6,1.6,0,0,1-.635-3.068L3.306,1.067H.533A.533.533,0,1,1,.533,0h3.2a.534.534,0,0,1,.521.418l.381,1.716H17.671a.533.533,0,0,1,.513.68L16.051,10.28a.534.534,0,0,1-.513.387H5.865a.533.533,0,0,0,0,1.067h9.671a.533.533,0,1,1,0,1.067Zm.428-3.2h8.841l1.829-6.4H4.872Z" /></svg>
                                <br />
                                <p class="text-center font-2" style="margin-right:6px"><span id="itemInCart"> {{items.length}}</span> @Localizer["Items added to cart"]</p>
                                <button v-if="items.length > 0" type="button" class="btn btn-outline-success rmall" @@click="emptyCart">
                                    @Localizer["Remove all items"]
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="QunatityError" class="text-danger text-center"></div>
                <!-- selected items table start-->

                <div class="horizontal-scroll" style="overflow-x:auto;">
                    <table class="table table-striped table-collapsed">
                        <thead class="bg-submain text-light">
                            <tr>
                                <th style="width: 7%">@Localizer["ID"] </th>
                                <th style="width: 11%; " class="text-left">@Localizer["Item"]</th>
                                <th style="width: 7%;">@Localizer["Unit Price"]</th>
                                <th style="width: 7% ">@Localizer["Quantity"]</th>
                                <th style="width: 8%;  " class="text-right">@Localizer["VAT"] %</th>
                                <th style="width: 7% ">@Localizer["Discount"] (%)</th>
                                <th style="width: 9% ">@Localizer["Discount Amount"]</th>
                                <th style="width: 7% ">@Localizer["Shelf.No"]</th>
                                <th style="width: 8% ">@Localizer["Unit"] </th>
                                <th style="width: 4%;  " class="text-right">@Localizer["VAT"] </th>
                                <th style="width: 10% " class="text-right">@Localizer["Total(Excl VAT)"]</th>
                                <th style="width: 10% " class="text-right">@Localizer["Total(Incl VAT)"]</th>
                                <th style="width: 3% "></th>
                            </tr>
                        </thead>
                        <tbody id="itemlisttable">
                        </tbody>
                        <tr is="itemrow" v-for="(item,index) in items" :item="item" v-bind:key="item.itemID" :vaterate="VATPercentage" :index="index" v-on:removeitem="removeItem(index)"></tr>
                    </table>
                    @*<div class="nicescroll-box" style="height: 331px; padding: 0 10px 0 0;">
                            <div id="replacement-invoice-body">
                                <itemrow v-for="item in model.itemDetails" :item="item"></itemrow>
                            </div>
                        </div>*@
                </div>

                <br />
                <!-- seleceted items table end-->
                <div class="d-flex justify-content-end">
                    <a href="#invoice" @@click="proceed()" class=" pull-right btn bg-main text-light"
                       style="background-color: none; ">@Localizer["Proceed"]</a>
                </div>
            </div>
            <!-- customer and items detail section end -->
            <hr>
            <!-- Sale invoice starts here -->
            <div id="invoice" class="expandable invoice m-auto mb-4" style="display: block; width: 90%;" v-if="showInvoice">
                <div class="d-flex justify-content-center" id="invoiceHead">
                    <h4 class="text-main">@Localizer["Purchase Invoice"]</h4>
                </div>
                <div id="invoice-row">
                    <!-- invoice table -->
                    <div class="horizontal-scroll" style="overflow-x:auto;">
                        <table class="table table-bordered table-sm" width="100%">
                            <thead>
                                <tr>
                                    <td colspan="2" class="text-left">
                                        <b>
                                            @Localizer["Customer"]:&nbsp; <span id="invoiceCustomerName" style="display: contents;">
                                                {{customerName}}
                                            </span>
                                        </b>
                                    </td>
                                    <td colspan="7" class="text-right">
                                        <b style="display: contents;">@Localizer["Date"]: @DateTime.Now.ToShortDateString()</b>
                                    </td>
                                </tr>
                                <tr>
                                    <th style="max-width:65px">@Localizer["S.No"]</th>
                                    <th>@Localizer["ID"]</th>
                                    <th>@Localizer["Item"]</th>
                                    <th>@Localizer["Unit Price"]</th>
                                    <th>@Localizer["Quantity"]</th>

                                    <th>@Localizer["VAT %"]</th>
                                    <th>@Localizer["VAT Total"]</th>
                                    <th>@Localizer["Total (Incl VAT)"]</th>
                                    <th>@Localizer["Total (Excl VAT)"]</th>
                                </tr>
                            </thead>
                            <tbody id="invoicetable">
                                <tr v-for="(item,index) in items" v-bind:key="item.itemID">
                                    <td>{{index+1}}</td>
                                    <td>{{item.itemID}}</td>
                                    <td>{{item.fullName}}</td>
                                    <td> SAR {{item.sellPrice}}</td>
                                    <td>{{item.inputQuantity}} x</td>

                                    <td>{{VATPercentage}}</td>
                                    <td>{{item.totalVat.toFixed(2)}}</td>
                                    <td> SAR: {{item.subTotalInclVat.toFixed(2)}}</td>
                                    <td> SAR: {{item.subTotalExclVat.toFixed(2)}}</td>
                                </tr>
                            </tbody>
                            <!--tables rows come from js-->
                        </table>
                    </div>
                </div>
                <div class="totalSection d-flex justify-content-between">
                    <div></div>
                    <!-- payment amount right side after invoice -->
                    <div id="totalAmountSection" style="width:300px !important">
                        <div class="d-flex justify-content-between p-2">
                            <p>@Localizer["Total"]</p>
                            <p id="total">{{parseFloat(subTotal).toFixed(2)}}</p>
                        </div>
                        <div class="d-flex justify-content-between p-2">
                            <p>@Localizer["Discount"] % </p>
                            <input type="number" name="DiscountAmount" id="DiscountAmount" min="0" max="100" class="form-control input-sm w-50 text-right" value="0" style="max-height: 25px;" v-model="discountPercentage" />
                        </div>

                        <div class="d-flex justify-content-between p-2">
                            <p>@Localizer["Net Total"]</p>
                            <p id="netTotal">{{parseFloat(netTotal).toFixed(2)}}</p>
                        </div>
                        <div class="d-flex justify-content-between p-2">
                            <p>@Localizer["VAT"] <b class="font-1">(@defaultVATPercentage %)</b></p>
                            <input type="number" value="@defaultVATPercentage" name="VATPercentage" id="VATPercentage" hidden>
                            <p> <span id="vat">{{parseFloat(taxTotal).toFixed(2)}}</span></p>
                        </div>
                        <div class="d-flex justify-content-between bg-main text-light br-main p-2">
                            <p>@Localizer["Grand Total"]</p>
                            <p id="grandTotal">{{parseFloat(grandTotal).toFixed(2)}}</p>
                        </div>
                        @*<div class="text-light p-2 border-0">
                                <label class="text-dark">@Localizer["Tax Treatment"]</label>
                                <textarea asp-for="TaxTreatmentNarration" class="form-control input-sm"
                                          v-model="taxTreatmentNarration" rows="2"></textarea>
                            </div>*@


                    </div>
                </div>
                <div class="row">
                    <div id="paymentSection" class="w-50 col-9">
                        <h5 class="mb-1">@Localizer["Payment Method"]</h5>
                        <div class="paymentmethods col-9" id="paymentmethods">
                            <div class="paymentTypeSelection my-3" id="paymentTypeSelection">
                                <input type="radio" v-model="paymentMethod" name="paymentMethod" value="0" checked />
                                <label for="paymentMethod">@Localizer["Cash"]</label>
                                <input type="radio" v-model="paymentMethod" name="paymentMethod" value="1" checked />
                                <label for="paymentMethod">@Localizer["Cheque"]</label>
                                <input type="radio" v-model="paymentMethod" name="paymentMethod" value="2" checked />
                                <label for="paymentMethod">@Localizer["On Network"]</label>
                                <input type="radio" v-model="paymentMethod" name="paymentMethod" value="3" checked />
                                <label for="paymentMethod">@Localizer["E-Transfer"]</label>
                            </div>
                            <div id="BankDetails" v-if="paymentMethod == 1">
                                <div id="ChequeInfo">
                                    <div class="row">
                                        <div class="form-group col-6">
                                            <label asp-for="BankName"></label>
                                            <span class="text-danger">*</span>
                                            <input asp-for="BankName" class="form-control" v-model="bankName" />
                                            <span asp-validation-for="BankName" class="text-danger"></span>
                                        </div>
                                        <div class="form-group col-6">
                                            <label asp-for="PayeeName"></label>
                                            <span class="text-danger">*</span>
                                            <input asp-for="PayeeName" class="form-control" v-model="payeeName" />
                                            <span asp-validation-for="PayeeName" class="text-danger"></span>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="form-group col-4">
                                            <label asp-for="ChequeNumber"></label>
                                            <span class="text-danger">*</span>
                                            <input type="number" asp-for="ChequeNumber" class="form-control" v-model="chequeNumber" />
                                            <span asp-validation-for="ChequeNumber" class="text-danger"></span>
                                        </div>
                                        <div class="form-group col-4">
                                            <label asp-for="ChequeDate"></label>
                                            <span class="text-danger">*</span>
                                            <input asp-for="ChequeDate" class="form-control" type="date" v-model="chequeDate" />
                                            <span asp-validation-for="ChequeDate" class="text-danger"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div id="PaymentTerminal" v-if="paymentMethod == 2 || paymentMethod == 3">
                                <div class="form-group">
                                    <label asp-for="TransactionId"></label>
                                    <input asp-for="TransactionId" class="form-control" v-model="transactionId" />
                                    <span asp-validation-for="TransactionId" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="form-group">
                                <label asp-for="Description"></label>
                                <textarea cols="0" rows="0" asp-for="Description" class="form-control" v-model="transactionId"></textarea>
                                <span asp-validation-for="Description" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="col-3 RecieveAsClass">
                        <div class="border-none my-2 d-flex justify-content-end">
                            <button class="btn btn-secondary" onclick="location.reload()" type="button">@Localizer["Cancel"]</button>
                            <button type="button" class="btn btn-primary mx-1" @@click="submit"
                                    style="padding-left: 25px; padding-right: 25px;">
                                @Localizer["Pay"]
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </form>
        <!-- Sale invoice ends here -->
        <!-- The Modal -->

        <div class="modal" id="deleteModal">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content text-center">
                    <!-- Modal Header -->
                    <div class="modal-header text-center d-flex justify-content-center">
                        <h4 class="font-3 text-danger">@Localizer["Delete Item"]</h4>
                    </div>
                    <!-- Modal body -->
                    <div class="modal-body px-4">
                        <input type="text" id="itemID" hidden /><input type="text" id="ItemName" hidden />
                        <span class="px-2"> @Localizer["Please confirm to remove item(s) from list"].</span>
                    </div>
                    <!-- Modal footer -->
                    <div class="modal-footer d-flex justify-content-center py-1">
                        <button id="removeItemCancelBtn" type="button" class="btn btn-secondary btn-sm" data-dismiss="modal">
                            @Localizer["No"]
                        </button>
                        <button id="deleteItemConfirmBtn" class="btn btn-primary btn-sm">@Localizer["Yes"]</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Emtpy list warning Modal -->
        @*alert form*@
        <div class="modal" id="alertModal">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content text-center">
                    <!-- Modal Header -->
                    <div class="modal-header text-center d-flex justify-content-center">
                        <h4 class="font-3 text-danger">@Localizer["Are You Sure ?"]</h4>
                    </div>
                    <!-- Modal body -->
                    <div class="modal-body px-4">
                        <input type="text" id="itemID" hidden /><input type="text" id="ItemName" hidden />
                        <span class="px-2"> @Localizer["All data from this invoice will be lost!"].</span>
                    </div>
                    <!-- Modal footer -->
                    <div class="modal-footer d-flex justify-content-center py-1">
                        <button id="removeItemCancelBtn" type="button" class="btn btn-secondary btn-sm" data-dismiss="modal">
                            @Localizer["Cancel"]
                        </button>
                        <button id="emptyData" class="btn btn-primary btn-sm">@Localizer["Continue"]</button>
                    </div>
                </div>
            </div>
        </div>



        <!-- The Modal -->

        <div class="modal" id="emptyListWarning">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header mb-1 pb-1" style="border-bottom: 1px solid #e3e3e3 !important;">
                        <h4>@Localizer["Note"]</h4>
                    </div>
                    <!-- Modal body -->
                    <div class="modal-body pl-4 text-center mb-1 pb-1 pt-1">
                        <h5 class="text-dark body-text" style="text-align:center !important"> @Localizer["Please Add Item To list"] .</h5>
                    </div>

                    <!-- Modal footer -->
                    <div class="modal-footer mt-0 pt-0 justify-content-center">
                        <button type="button" class="btn btn-outline-danger btn-sm " data-dismiss="modal">
                            @Localizer["Close"]
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal" id="SelectCustomerWarning">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header mb-1 pb-1" style="border-bottom: 1px solid #e3e3e3 !important;">
                        <h4>@Localizer["Note"]</h4>
                    </div>
                    <!-- Modal body -->
                    <div class="modal-body pl-4 text-center mb-1 pb-1 pt-1">
                        <h5 class="text-dark body-text"> @Localizer["Please Select Supplier"] .</h5>
                    </div>

                    <!-- Modal footer -->
                    <div class="modal-footer mt-0 pt-0 justify-content-center">
                        <button type="button" class="btn btn-outline-danger btn-sm " data-dismiss="modal">
                            @Localizer["Close"]
                        </button>
                    </div>
                </div>
            </div>
        </div>


        <div class="modal" id="DeliveryModal">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header mb-1 pb-1" style="border-bottom: 1px solid #e3e3e3 !important;">
                        <h4>@Localizer["Note"]</h4>
                    </div>
                    <!-- Modal body -->
                    <div class="modal-body pl-4 text-center mb-1 pb-1 pt-1" id="DeliveryModalItems">

                    </div>

                    <!-- Modal footer -->
                    <div class="modal-footer mt-0 pt-0 justify-content-center">
                        <button type="button" class="btn btn-outline-danger btn-sm " data-dismiss="modal">
                            @Localizer["Close"]
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal" id="confirmDialog">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content text-center">
                    <!-- Modal Header -->
                    <div class="modal-header text-center d-flex justify-content-center">
                        <h4 class="font-3 text-danger">@Localizer["Confirmation"]</h4>
                    </div>
                    <!-- Modal body -->
                    <div class="modal-body px-4">
                        <span id="confirmMessage" class="px-2"></span>
                    </div>
                    <!-- Modal footer -->
                    <div class="modal-footer d-flex justify-content-center py-1">
                        <button id="confirmNo" type="button" class="btn btn-secondary btn-sm" data-dismiss="modal">
                            @Localizer["No"]
                        </button>
                        <button id="confirmYes" class="btn btn-primary btn-sm">@Localizer["Yes"]</button>
                    </div>
                </div>
            </div>
        </div>


    </div>

</div>
@section Modal{
    <div id="SuccessModalContainer">

    </div>

    <div id="ErrorModalContainer">
        <div class="modal" id="ErrorModal">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header mb-1 pb-1" style="border-bottom: 1px solid #e3e3e3 !important;">
                        <h4 class="text-danger">Error</h4>
                    </div>
                    <!-- Modal body -->
                    <div class="modal-body pl-4 text-center mb-1 pb-1 pt-1">
                        <span id="ErrorMessage"></span>
                    </div>

                    <!-- Modal footer -->
                    <div class="modal-footer mt-0 pt-0 justify-content-center">
                        <button type="button" class="btn btn-outline-danger btn-sm " data-dismiss="modal">
                            @Localizer["Close"]
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div class="modal" id="AlertModal"
         aria-labelledby="exampleModalCenterTitle">
        <div class="modal-dialog modal-dialog-centered  success-modal" style="min-width: 528px;">
            <div class="modal-content">
                <div class="modal-header pb-0">
                    <img src="~/icons/alert.svg" width="100" height="100" alt="">
                </div>
                <div class="modal-body mx-3">
                    <p class="font-2 text-center"> <span class="text-main font-2 font-weight-bold ">Silicon Pipes</span>&nbsp;&nbsp; @Localizer["You dont't have enough qauntity in inventory"]</p>
                    <p class="font-2 text-center"><span>@Localizer["Inventory"]: <b id="InventoryQuntity">24</b>&nbsp;&nbsp;</span> <span>@Localizer["Reserved"]: <b id="Reserved"></b></span></p>
                </div>
                <div class="modal-footer pt-0">
                    <button class="btn btn-danger btn-sm" id="deleteItemModal" item-value="-1">@Localizer["Remove Item"]</button>
                    <button class="btn btn-primary btn-sm" data-dismiss="modal">@Localizer["Proceed"]</button>
                </div>
            </div>
        </div>
    </div>

}
@section Scripts{

    <environment include="Development">
        <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
    </environment>
    <environment include="Production">
        <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14"></script>
    </environment>

    <script src="~/js/validation.js"></script>
    <script>

        $('#removeItemCancelBtn').click(function () {
            $('#deleteItemConfirmBtn').off();
        });

        const uiConfirm = {
            confirm: async (message) => createConfirmDialog(message)
        };

        const  createConfirmDialog = (message) => {
            return new Promise((complete,failed)=>
            {
                $('#confirmMessage').text(message);
                $('#confirmYes').off();
                $('#confirmNo').off();
                $('#confirmYes').on('click',()=>
                {
                    $('#confirmDialog').modal('toggle');
                    complete(true);

                });
                $('#confirmNo').on('click',()=>
                {
                    $('#confirmDialog').modal('toggle');
                    complete(false);

                });
                $('#confirmDialog').modal('show');

            });

        };
        const invoiceState = {
            showInvoice:false,
            supplierName: null,
            supplierAddress:null,
            discountAmount:0,
            discountPercentage:0,
            VATPercentage:@defaultVATPercentage,
            Remarks: null,
            paymentMethod:0,
            chequeNumber:null,
            chequeDate:null,
            chequeAmount:0,
            bankName:null,
            payeeName: null,
            transactionId: null,
            description:null,
            taxTreatmentNarration:null,
            items:[],

        };

        //handles user data and auto complete functions
        $(function () {

            ///new update
            // items autocomplete functions
            $("#items").autocomplete({
                delay: 500,
                noCache:true,
                serviceUrl: '@Url.Action("Search","Items")',
                transformResult: function (response) {
                    return {
                        suggestions: $.map(JSON.parse(response), function (dataItem) {
                            return {
                                ItemID: dataItem.ItemID,
                                value: dataItem.value,
                                SellPrice: dataItem.SellPrice,
                                CostPrice: dataItem.CostPrice,
                                Quantity: dataItem.Quantity,
                                ShelfNo: dataItem.ShelfNo,
                                Name:dataItem.Name
                            }
                        })
                    }
                },
                onSelect: async function (ui) {
                    dlist = invoiceState.items.filter(function (item) {
                        return item.itemID == ui.ItemID;
                    });
                    if (ui.OnhandQuantity <= 0) {
                        const confirm = await uiConfirm.confirm('@Localizer["No On Hand Quantity Available for this Item are you sure to add this?"]');
                        if (!confirm) {
                            return;
                        }
                    }
                    if (dlist.length > 0) {
                        dlist.forEach((x) => {
                            x.inputQuantity++;
                        });
                    } else {
                        PushItem(ui);
                        $('#items').val('');
                        $(this).off("focus");
                    }

                },
                 open: function(event) {
                        $('.ui-autocomplete').css('height', 'auto');
                        let $input = $(event.target),
                            inputTop = $input.offset().top,
                            inputHeight = $input.height(),
                            autocompleteHeight = $('.ui-autocomplete').height(),
                            windowHeight = $(window).height();

                        if ((inputHeight + inputTop+ autocompleteHeight) > windowHeight) {
                            $('.ui-autocomplete').css('height', (windowHeight - inputHeight - inputTop - 20) + 'px');
                        }
                    },
                formatResult: function (suggestion) {

                    var html = "";
                    html += '<div class="card p-2"><div class="d-flex justify-content-between"><p class="mb-0 mt-0">@Localizer["ID"]: '
                    html += suggestion.ItemID
                    html += " "
                    html += suggestion.Name
                    html += '</p><p class=" mb-0 mt-0">@Localizer["Cost Price"]: '
                    html += suggestion.CostPrice


                    html += '</p><p class="ml-1  mb-0 mt-0">@Localizer["Quantity"]: '
                    html += suggestion.Quantity
                    if (suggestion.Quantity > 0) {
                        html += '</p><p class=" mb-0 mt-0 text-main" style="font-weight:600">@Localizer["In Stock"]</p></div></div>'
                    } else {
                        html += '</p><p class=" mb-0 mt-0 text-danger" style="font-weight:600">@Localizer["Out of Stock"]</p></div></div>'
                    }
                    return html;
                },
            });
            // Start Ajax calls


            PushItem = function (item) {
                invoiceState.items.push({
                    itemID: item.ItemID,
                    fullName: item.Name,
                    costPrice: item.CostPrice,
                    sellPrice: item.SellPrice,
                    discountPercentage: 0,
                    discountAmount: 0,
                    quantity: item.Quantity,
                    inputQuantity: 1,
                    shelfNumber: item.ShelfNo,
                    totalVat: 0,
                    subTotalExclVat: 0,
                    subTotalInclVat: 0,
                });
            }

        });

        let vueApp;
        document.addEventListener('DOMContentLoaded',function () {
            initRowComponent();
            initVue();
        }, false);

        function initVue() {
            vueApp = new Vue({
                el: '#invoice-app',
                 data: invoiceState,
                 methods: {
                    deleteItem: function (index) {
                         this.items.splice(index, 1)
                    },
                    decimalDigits: function (value) {
                         return value.toFixed(2);
                     },
                    printInvoice: function () {
                         window.print();
                     },
                     confirmDelteItem: function (index) {
                         this.items = this.items.filter((value, i) => {
                             return i != index;
                         });
                         $('#deleteModal').modal('hide');
                         $('#deleteItemConfirmBtn').off('click');
                     },
                     removeItem: function (index) {

                         $('#deleteModal').modal('toggle');
                         $('#deleteItemConfirmBtn').click(function () {
                             vueApp.confirmDelteItem(index);
                         });

                     },
                     proceed: async function () {
                        if (this.items.length == 0) {
                            $('#emptyListWarning').modal('toggle');
                            return false;
                        }
                         if (!await this.validateItems()) {
                             this.showInvoice = false;
                            return false;
                         }
                        this.showInvoice = true;
                        return true;
                     },
                    submit: async function () {
                         if (await this.validate()) {

                             var itemsPayload = this.items.map((value, index, items) => {
                                 return {
                                     itemID: value.itemID,
                                     srNo: index + 1,
                                     unitId: value.UnitID,
                                     costPrice: value.sellPrice,
                                     quantity: value.inputQuantity,
                                     discountPercentage: value.discountPercentage,
                                     discountAmount: value.discountAmount,
                                     VATPercentage: this.VATPercentage,
                                     VATAmount: value.totalVat,
                                     subTotalVATExclusive: value.subTotalExclVat,
                                     subTotalVATInclusive: value.subTotalInclVat,
                                 };
                             });

                             var payload = {
                                 purchaseInvoiceDetails: itemsPayload,
                                 supplierName: this.supplierName,
                                 supplierAddress: this.supplierAddress,
                                 total: this.subTotal,
                                 netTotal: this.netTotal,
                                 discountPercentage: this.discountPercentage,
                                 discountAmount: this.discountTotal,
                                 totalVAT: this.taxTotal,
                                 grossTotal: this.grandTotal,
                                 VATPercentage: this.VATPercentage,
                                 taxTreatmentNarration: this.taxTreatmentNarration,
                                 paymentMethod: this.paymentMethod,
                                 chequeNumber: this.chequeNumber,
                                 chequeDate: this.chequeDate,
                                 chequeAmount: this.chequeAmount,
                                 bankName: this.bankName,
                                 payeeName: this.payeeName,
                                 description: this.description,
                                 transactionId:this.transactionId,
                             };
                             //Submit the purchase Invoice Form
                             $.ajax({
                                 url: '@Url.Action("Create")',
                                 type: 'post',
                                 data: payload,
                                 headers: {
                                     '__RequestVerificationToken': '@GetAntiXsrfRequestToken()'
                                 },
                                 success: function (data, textStatus, jqXHR) {

                                     if (jqXHR.status == 201) {
                                         location.href = data.redirectUrl;
                                     }
                                 },
                                 error: function (response, textStatus, xhr) {

                                     if (response.status == 400) {

                                         var errors = JSON.parse(response.responseText);
                                         for (const [key, value] of Object.entries(errors)) {
                                             if (key == "") {
                                                 $('#ErrorMessage').text(value);
                                                 $('#ErrorModal').modal("toggle");
                                                 continue;
                                             }
                                             $(`span[data-valmsg-for='${key}']`).text(value);
                                         }
                                     }
                                 }
                             });
                        }
                     },
                    validate: async function () {
                         if (!await this.validateItems()) {
                             return false;
                         }
                        return true;
                     },
                    validateItems: async function(){
                        var isValid = true;
                        for (let i = 0; i < this.items.length; i++) {
                            let value = this.items[i];
                            let index = i;
                            var rowComponent = this.$children[index];
                             if (!value.inputQuantity || value.inputQuantity <= 0) {
                                 var quantityElement = rowComponent.$refs['el_inputquantity'];
                                 reportErrorForElement(quantityElement,"@Localizer["Invalid Quantity"]")
                                 isValid = false;
                            }

                            if (!value.sellPrice || value.sellPrice <= 0) {
                                var sellPriceElement = rowComponent.$refs['el_sellprice'];
                                reportErrorForElement(sellPriceElement,'@Localizer["Invalid Sell Price"]')
                                 isValid = false;
                            }

                             if (value.discountPercentage > 100 || value.discountPercentage < 0) {
                                 var discountPercentageElement = rowComponent.$refs['el_discountpercentage'];
                                 reportErrorForElement(discountPercentageElement, '@Localizer["Invalid Discount Percentage"]');
                                 isValid = false;
                             }
                        }
                         return isValid;
                     },
                     emptyCart: function () {
                         $('#deleteModal').modal('toggle');
                         $('#deleteItemConfirmBtn').click(function () {
                             vueApp.removeAllItems();
                             $('#deleteModal').modal('hide');
                         });
                     },
                    removeAllItems: function () {
                            this.items = [];
                            this.showInvoice = false;
                     },


                },
                 computed: {
                     subTotal: function () {
                         return this.items.reduce(function (accumulator, item) {
                                 return accumulator + (item.subTotalExclVat);
                             }, 0)
                        return total;
                    },
                    netTotal: function () {
                        return this.subTotal - this.discountTotal;
                    },
                    discountTotal: function () {
                        var total = this.subTotal * (this.discountPercentage / 100);
                             return total;
                     },
                    taxTotal: function () {
                        var total = (this.netTotal) * (this.VATPercentage / 100);
                        return total;
                         },
                    grandTotal: function () {
                        var total = (this.netTotal) + this.taxTotal;
                             return total;
                     },
                    isCash: function () {
                        return this.saleAs == 'cash';
                     },
                }
            });
        }
        function initRowComponent() {
             Vue.component('itemrow', {
            props: ['vaterate','item','index',],
                 template: `<tr>
           <td style='width:7%; white-space: pre-wrap;'>{{item.itemID}}</td>
            <td style='width:11%; white-space: pre-wrap;'>{{item.fullName}}</td>
            <td style="width:7%" ><input type='number'  name="SellPrice" ref="el_sellprice"  v-model="item.sellPrice"  class="form-control" style='width:100%; text-align: right;'/></td>
            <td style="width:7%"><input type='number' onfocus="this.value=''" name='Quantity' ref="el_inputquantity" class='form-control' min='0'  v-model="item.inputQuantity" style='width:105%; text-align: right;'/></td>
            <td style="width:7%"><input class='form-control valid border-0 text-right'  type='number' name='VATPercentage' v-model="vaterate" disabled/></td>
            <td style="width:7%" ><input name='DiscountPercentage' onfocus="this.value=''" ref="el_discountpercentage"  type='number' style='width:100% !important; text-align: right !important;' class='form-control text-left discount-control' id='DiscountPercentage' v-model="item.discountPercentage" @@change="onDiscountPercentageChange($event,item)" /></td>
            <td style="width:7%"><input name='DiscountAmount' onfocus="this.value=''" type='number' ref="el_discountamount" style='width:88% !important; text-align: right !important;'  class='form-control text-left discount-control' id='DiscountAmount'  v-model="item.discountAmount" @@change="onDiscountAmountChange($event,item)" ></td>
            <td style="width:7%">
               {{item.shelfNumber}}
            </td>
            <td style='width:10%'>
                <input type="text" name='UnitID' ref="el_unitid"  class='browser-default form-control' v-model="item.UnitID" />
            </td>
            <td style="width:4%" class='text-right'>{{totalVat}}</td>
            <td style="width:7%" class='text-right'>{{subTotalExclVat}}</td>
            <td style="width:7%" class='text-right'>{{subTotalInclVat}}</td>
            <td style="width:3%"><a class="btn btn-outline-danger btn-sm" style="width:25px; height:30px !important" @@click="$emit('removeitem')">X</a></td>
            </tr>`,
                 methods: {
                     onDiscountPercentageChange($event, item) {
                         if (item) {
                             var currentValue = item.discountPercentage;
                             if (isNaN(currentValue)) {
                                 $event.target.setCustomValidity("Invalid Value");
                                 $event.target.reportValidity();
                                 return;
                             }
                             else {
                                 if (currentValue > 100) {
                                     $event.target.setCustomValidity("Discount % Cannot be Greater than 100");
                                     $event.target.reportValidity();
                                     return;
                                 }

                             this.item.discountAmount = (this.item.sellPrice * this.item.inputQuantity) * this.item.discountPercentage / 100;
                             }
                         }

                     },
                     onDiscountAmountChange($event, item) {
                         if (item) {
                             var _discount_amount = item.discountAmount;
                             var _current_price = item.sellPrice;
                             var _current_quantity = item.inputQuantity;

                             if (_discount_amount > _current_quantity * _current_price) {
                                 $event.target.setCustomValidity("Discount Amount Cannot be Greater than Total Amount");
                                 $event.target.reportValidity();
                                 return;
                             }
                             this.item.discountPercentage = (_discount_amount / (this.item.sellPrice * this.item.inputQuantity)) * 100;
                         } else {
                             console.log("Invalid Array Index");
                         }
                     },
                     decimalDigits: function (value) {
                         var floatNum = parseFloat(value);
                         return parseFloat(floatNum.toPrecision(2));
                     },
                     validateQuantity: function (event, item) {
                         if (isNaN(item.inputQuantity)) {
                         reportErrorForElement(event.target, "@Localizer["Required *"]");
                         } else if (item.inputQuantity < 0) {
                             reportErrorForElement(event.target, "@Localizer["Cannot be Less than Zero"]");
                         }
                         else if (item.inputQuantity > item.onHandQuantity + item.reservedQuantity) {
                             reportErrorForElement(event.target, "@Localizer["Not Enough Quantity Available"]");
                         }
                     },
                     validatePrice: function (event, item) {
                         item.sellPrice = item.sellPrice.replace(/[^0-9.]/g, '');
                         if (isNaN(item.sellPrice)) {
                             reportErrorForElement(event.target, "@Localizer["Required"]");
                         } else if (item.sellPrice <= item.costPrice) {
                             reportErrorForElement(event.target, "@Localizer["Sell Price Cannot be Less Than Cost Price:"]" +" "+  item.costPrice);
                         }
                     }
                 },
                 computed: {
                     discountAmount: function () {
                         this.item.discountAmount = (this.item.sellPrice * this.item.inputQuantity) * this.item.discountPercentage / 100;
                         return this.item.discountAmount;
                     },
                     discountTotal: function () {
                         return this.item.discountAmount ?? 0;
                     },
                     totalVat: function () {
                         if (isNaN(this.item.inputQuantity * this.item.sellPrice) || (this.item.inputQuantity * this.item.sellPrice) == 0) {
                             return 0;
                         }
                         this.item.totalVat = ((this.item.inputQuantity * this.item.sellPrice) - this.discountTotal) * this.vaterate / 100;
                         return this.item.totalVat;
                     },
                     subTotalExclVat: function () {

                         if (isNaN(this.item.inputQuantity * this.item.sellPrice) || (this.item.inputQuantity * this.item.sellPrice) == 0) {
                             return 0;
                         }
                         this.item.subTotalExclVat = (this.item.sellPrice * this.item.inputQuantity) - this.discountTotal;
                         return this.item.subTotalExclVat;
                     },
                     subTotalInclVat: function () {
                         this.item.subTotalInclVat = ((this.subTotalExclVat) + this.totalVat);
                         return this.item.subTotalInclVat;
                     }

                 }
        })
        }
        function reportErrorForElement(element, errorMessage) {
            if (element && element instanceof HTMLElement) {
                element.classList.add('invalid');
                element.setCustomValidity(errorMessage);
                element.reportValidity();
                element.focus({ preventScroll: false });
            }

        };




    </script>
}


